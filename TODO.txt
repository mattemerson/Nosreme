https://maven.apache.org/
https://en.wikipedia.org/wiki/List_of_software_package_management_systems
https://gradle.org/install/
https://spring.io/guides/gs/gradle/
https://akka.io/
https://developer.lightbend.com/start/?group=akka&project=akka-quickstart-java
https://stackoverflow.com/questions/9577012/whats-the-equivalent-of-pythons-celery-project-for-java
https://hazelcast.com/resources/whitepaper-redis-comparison/
https://stackoverflow.com/questions/10137857/is-redis-just-a-cache
https://spring.io/guides/gs/reactive-rest-service/
http://www.baeldung.com/persistence-with-spring-series/

TODO; in no particular order
AWS Stuff (this link is where a lot of the getting started tutorials are)
https://aws.amazon.com/getting-started/tutorials/

Neo4j (there is the Neo4j website and the Spring website)
https://neo4j.com/docs/java-reference/current/

https://spring.io/guides/gs/accessing-neo4j-data-rest/

Oauth2 (there is a spring tutorial that walks you through this)
gs-spring-oauth2-simple (uses facebook for authzn)

Docker
-Get it loaded on my machine
-Get it started in a spring tutorial
https://spring.io/guides/gs/spring-boot-docker/

-Get it started on AWS

Downloaded Properties
akka-quickstart
gs-batch-processing
gs-gradle (basic)
gs-messaging-jms-master
gs-relational-database-master (h2 in-memory-db)
gs-rest-service (basic rest; needs plumbing to a database)
gs-scheduling-tasks (the utterly basic; could do more complicated cron)
gs-uploading-files-master (could upload and had a simple front-end using thymeleaf)
gs-access-data-jpa (shows off the Repository JPA functions of spring - builds dao's for you)
gs-access-data-rest-master (shows off how the Spring REST can create HATEOS interfaces backed by JPA repositories; using just some annotations and basic tags)
gs-rest-client-master (allows you to connect to and consume a Rest endpoint; using some annotations)
gs-serving-web-content-master (how to use Spring MVC)
gs-access-data-neo4j
gs-access-neo4j-rest (neo4j/neo4j or secret if I change it)

Spring Reference Documentation
https://docs.spring.io/spring/docs/current/spring-framework-reference/#jms-destinations

You can create a Properties file.

Downloaded a project to upload files...it worked!

Created basic scheduler and a basic batch upload

This goes through the application-properties?
https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html

spring.datasource.platform

Downloaded spring sts support

Go into the project directory and do this....
gradlew bootRun

Gradle added gradle home and to path
Java added Java home and to path

Downloaded 7zip (evidently this is in the path?)
Look at Spring Profiles

cURL installed onto the path

Install Git for Windows
http://gitforwindows.org/
Git is installed.  Need to go through a tutorial.

My Personal Work Email
nosreme.j.wettham@gmail.com
200ten##

My Personal Amazon Account (the free plan); Samarkand is the plan
nosreme.j.wettham@gmail.com
200ten##

Spring REST Tutorial to Read
https://spring.io/guides/tutorials/bookmarks/
https://spring.io/guides/gs/rest-service/ (this one has links to a ton of other tutorials)

zookeeper

Things to do
-Command Notes/Scripts
-Suggested environmental set-up

Eclipse
-Upgrade to Oxygen (DONE)
-Gradle Plug-in (DONE)

Gradle (done!)
-Download gradle
-Tutorial
-Gradle Wrapper! (it just kind of does this)

Github
-Refresh command file
-Build-up comparison notes
-CI/CD
-Command Line Tool

Akka
-Download
-Integrated with Spring
-Akka Persistence

Spring REST
-Got this working.  Look at this page for other examples

Databases
-MySQL
-In-Memory DB; http://www.baeldung.com/java-in-memory-databases
https://en.wikipedia.org/wiki/List_of_in-memory_databases
https://spring.io/guides/gs/relational-data-access/; this used an H2 database; also pointed to ther tutorials?  QUESTION: how would I used a HyperSQLDB?

-Looked at Uploading files


-NoSQL DB (Mongo, Cassandra)

Caching
-Radis
-Memcache
-Elasticache

-Artifactory

Try Celery (this is Python only)

-Use a Proper Structure

--Docker
---followed the steps in the following Spring boot tutorial to set-up my system to run Docker
-- on my home machine (5.2.4) (Oracle VM Virtual Box)
--https://spring.io/guides/tutorials/spring-boot-oauth2/
--Downloaded and installed VirtualBox; https://www.virtualbox.org/wiki/Downloads for windows
-- Docker community edition install: https://docs.docker.com/engine/installation/ (Stable)
--RAN INTO VARIOUS PROBLEMS WITH THIS


https://en.wikipedia.org/wiki/Social_login
ocial login is a form of single sign-on using existing information from a social networking service such as Facebook, Twitter or Google+, to sign into a third party website instead of creating a new login account specifically for that website. It is designed to simplify logins for end users as well as provide more and more reliable demographic information to web developers

mvn spring-boot:run